[
{"url": "https://codeforces.com/contest/1622/problem/D", "depth": 1}
][
{"url": "https://codeforces.com/contest/1622/problem/D", "depth": 1}
][
{"url": "https://codeforces.com/contest/1622/problem/D", "depth": 1}
][
{"url": "https://codeforces.com/contest/1622/problem/D", "depth": 1},
{"text": "window.standaloneContest = false;\n        function adjustViewport() {\n            var screenWidthPx = Math.min($(window).width(), window.screen.width);\n            var siteWidthPx = 1100; // min width of site\n            var ratio = Math.min(screenWidthPx / siteWidthPx, 1.0);\n            var viewport = \"width=device-width, initial-scale=\" + ratio;\n            $('#viewport').attr('content', viewport);\n            var style = $('<style>html * { max-height: 1000000px; }</style>');\n            $('html > head').append(style);\n        }\n\n        if ( /Android|webOS|iPhone|iPad|iPod|BlackBerry/i.test(navigator.userAgent) ) {\n            adjustViewport();\n        }\n\n        /* Protection against trailing dot in domain. */\n        let hostLength = window.location.host.length;\n        if (hostLength > 1 && window.location.host[hostLength - 1] === '.') {\n            window.location = window.location.protocol + \"//\" + window.location.host.substring(0, hostLength - 1);\n        }"},
{"text": "Problem - D - Codeforces"},
{"text": "MathJax.Hub.Config({\n      tex2jax: {inlineMath: [['$$$','$$$']], displayMath: [['$$$$$$','$$$$$$']]}\n    });\n    MathJax.Hub.Register.StartupHook(\"End\", function () {\n        Codeforces.runMathJaxListeners();\n    });"},
{"text": "String.prototype.hashCode = function() {\n        var hash = 0, i, chr;\n        if (this.length === 0) return hash;\n        for (i = 0; i < this.length; i++) {\n            chr   = this.charCodeAt(i);\n            hash  = ((hash << 5) - hash) + chr;\n            hash |= 0; // Convert to 32bit integer\n        }\n        return hash;\n    };\n\n    var queryMobile = Codeforces.queryString.mobile;\n    if (queryMobile === \"true\" || queryMobile === \"false\") {\n        Codeforces.putToStorage(\"useMobile\", queryMobile === \"true\");\n    } else {\n        var useMobile = Codeforces.getFromStorage(\"useMobile\");\n        if (useMobile === true || useMobile === false) {\n            if (useMobile != false) {\n                Codeforces.redirect(Codeforces.updateUrlParameter(document.location.href, \"mobile\", useMobile));\n            }\n        }\n    }"},
{"text": "if (window.parent.frames.length > 0) {\n        window.stop();\n    }"},
{"text": "window.fbAsyncInit = function() {\n        FB.init({\n            appId      : '554666954583323',\n            xfbml      : true,\n            version    : 'v2.8'\n        });\n        FB.AppEvents.logPageView();\n    };\n\n    (function(d, s, id){\n        var js, fjs = d.getElementsByTagName(s)[0];\n        if (d.getElementById(id)) {return;}\n        js = d.createElement(s); js.id = id;\n        js.src = \"//connect.facebook.net/en_US/sdk.js\";\n        fjs.parentNode.insertBefore(js, fjs);\n    }(document, 'script', 'facebook-jssdk'));"},
{"text": "$(document).ready(function () {\n    (function () {\n        jQuery.expr[':'].containsCI = function(elem, index, match) {\n            return !match || !match.length || match.length < 4 || !match[3] || (\n                    elem.textContent || elem.innerText || jQuery(elem).text() || ''\n            ).toLowerCase().indexOf(match[3].toLowerCase()) >= 0;\n        }\n    }(jQuery));\n\n    $.ajaxPrefilter(function(options, originalOptions, xhr) {\n        var csrf = Codeforces.getCsrfToken();\n\n        if (csrf) {\n            var data = originalOptions.data;\n            if (originalOptions.data !== undefined) {\n                if (Object.prototype.toString.call(originalOptions.data) === '[object String]') {\n                    data = $.deparam(originalOptions.data);\n                }\n            } else {\n                data = {};\n            }\n            options.data = $.param($.extend(data, { csrf_token: csrf }));\n        }\n    });\n\n    window.getCodeforcesServerTime = function(callback) {\n        $.post(\"/data/time\", {}, callback, \"json\");\n    }\n\n    window.updateTypography = function () {\n        $(\"div.ttypography code\").addClass(\"tt\");\n        $(\"div.ttypography pre>code\").addClass(\"prettyprint\").removeClass(\"tt\");\n        $(\"div.ttypography table\").addClass(\"bordertable\");\n        prettyPrint();\n    }\n\n    $.ajaxSetup({ scriptCharset: \"utf-8\" ,contentType: \"application/x-www-form-urlencoded; charset=UTF-8\", headers: {\n        'X-Csrf-Token': Codeforces.getCsrfToken()\n    }});\n\n    window.updateTypography();\n\n    Codeforces.signForms();\n\n    setTimeout(function() {\n        $(\".second-level-menu-list\").lavaLamp({\n            fx: \"backout\",\n            speed: 700\n        });\n    }, 100);\n\n\n    Codeforces.countdown();\n    $(\"a[rel='photobox']\").colorbox();\n\n\n    function showAnnouncements(json) {\n        //info(\"j=\" + JSON.stringify(json));\n\n        if (json.t != \"a\") {\n            return;\n        }\n\n        setTimeout(function() {\n            Codeforces.showAnnouncements(json.d, \"en\");\n        }, Math.random() * 500);\n    }\n\n    function showEventCatcherUserMessage(json) {\n        if (json.t == \"s\") {\n            var points = json.d[5];\n            var passedTestCount = json.d[7];\n            var judgedTestCount = json.d[8];\n            var verdict = preparedVerdictFormats[json.d[12]];\n            var verdictPrototypeDiv = $(\".verdictPrototypeDiv\");\n            verdictPrototypeDiv.html(verdict);\n            if (judgedTestCount != null && judgedTestCount != undefined) {\n                verdictPrototypeDiv.find(\".verdict-format-judged\").text(judgedTestCount);\n            }\n            if (passedTestCount != null && passedTestCount != undefined) {\n                verdictPrototypeDiv.find(\".verdict-format-passed\").text(passedTestCount);\n            }\n            if (points != null && points != undefined) {\n                verdictPrototypeDiv.find(\".verdict-format-points\").text(points);\n            }\n            Codeforces.showMessage(verdictPrototypeDiv.text());\n        }\n    }\n\n    $(\".clickable-title\").each(function() {\n        var title = $(this).attr(\"data-title\");\n        if (title) {\n            var tmp = document.createElement(\"DIV\");\n            tmp.innerHTML = title;\n            $(this).attr(\"title\", tmp.textContent || tmp.innerText || \"\");\n        }\n    });\n\n    $(\".clickable-title\").click(function() {\n        var title = $(this).attr(\"data-title\");\n        if (title) {\n            Codeforces.alert(title);\n        } else {\n            Codeforces.alert($(this).attr(\"title\"));\n        }\n    }).css(\"position\", \"relative\").css(\"bottom\", \"3px\");\n\n        Codeforces.showDelayedMessage();\n\n    Codeforces.reformatTimes();\n\n    //Codeforces.initializePubSub();\n    if (window.codeforcesOptions.subscribeServerUrl) {\n        window.eventCatcher = new EventCatcher(\n            window.codeforcesOptions.subscribeServerUrl,\n            [\n                Codeforces.getGlobalChannel(),\n                Codeforces.getUserChannel(),\n                Codeforces.getUserShowMessageChannel(),\n                Codeforces.getContestChannel(),\n                Codeforces.getParticipantChannel(),\n                Codeforces.getTalkChannel()\n            ]\n        );\n\n        if (Codeforces.getParticipantChannel()) {\n            window.eventCatcher.subscribe(Codeforces.getParticipantChannel(), function(json) {\n                showAnnouncements(json);\n            });\n        }\n\n        if (Codeforces.getContestChannel()) {\n            window.eventCatcher.subscribe(Codeforces.getContestChannel(), function(json) {\n                showAnnouncements(json);\n            });\n        }\n\n        if (Codeforces.getGlobalChannel()) {\n            window.eventCatcher.subscribe(Codeforces.getGlobalChannel(), function(json) {\n                showAnnouncements(json);\n            });\n        }\n\n        if (Codeforces.getUserChannel()) {\n            window.eventCatcher.subscribe(Codeforces.getUserChannel(), function(json) {\n                showAnnouncements(json);\n            });\n        }\n\n        if (Codeforces.getUserShowMessageChannel()) {\n            window.eventCatcher.subscribe(Codeforces.getUserShowMessageChannel(), function(json) {\n                showEventCatcherUserMessage(json);\n            });\n        }\n    }\n\n    Codeforces.setupContestTimes(\"/data/contests\");\n    Codeforces.setupSpoilers();\n    Codeforces.setupTutorials(\"/data/problemTutorial\");\n        });"},
{"text": "var _gaq = _gaq || [];\n  _gaq.push(['_setAccount', 'UA-743380-5']);\n  _gaq.push(['_trackPageview']);\n\n  (function () {\n    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;\n    ga.src = (document.location.protocol == 'https:' ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';\n    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);\n  })();"},
{"text": "Enter"},
{"text": "|"},
{"text": "Register"},
{"text": "Home"},
{"text": "Top"},
{"text": "Contests"},
{"text": "Gym"},
{"text": "Problemset"},
{"text": "Groups"},
{"text": "Rating"},
{"text": "Edu"},
{"text": "API"},
{"text": "Calendar"},
{"text": "Help"},
{"text": "Deltix Rounds 2021"},
{"text": "$(document).ready(function () {\n            $(\"input.search\").focus(function () {\n                if ($(this).attr(\"data-isPlaceholder\") === \"true\") {\n                    $(this).val(\"\");\n                    $(this).removeAttr(\"data-isPlaceholder\");\n                }\n            });\n        });"},
{"text": "Educational Codeforces Round 120 (Rated for Div. 2)"},
{"text": "Finished"},
{"text": "\u2192 Practice?"},
{"text": "Want to solve the contest problems after the official contest ends? Just register for practice and you will be able to submit solutions."},
{"text": "\u2192 Virtual participation"},
{"text": "Virtual contest is a way to take part in past contest, as close as possible to participation on time. It is supported only ICPC mode for virtual contests.\n\nIf you've seen these problems, a virtual contest is not for you - solve these problems in the archive.\n\nIf you just want to solve some problem from a contest, a virtual contest is not for you - solve this problem in the archive.\n\nNever use someone else's code, read the tutorials or communicate with other person during a virtual contest."},
{"text": "\u2192 Problem tags"},
{"text": "combinatorics"},
{"text": "math"},
{"text": "two pointers"},
{"text": "*2000"},
{"text": "No tag edit access"},
{"text": "$(\".tag-box img\").click(function () {\r\n        var tagName = $(this).attr(\"value\");\r\n        Codeforces.confirm(\"Are you sure you want to remove this tag?\", function () {\r\n            $(\"#removeTagForm input[name=tagName]\").val(tagName);\r\n            $(\"#removeTagForm\").submit();\r\n        }, function () {\r\n        }, \"Yes\", \"No\");\r\n    });\r\n\r\n    $(\"#addTagLink\").click(function () {\r\n        $(this).hide();\r\n        $(\"#addTagLabel\").show();\r\n        return false;\r\n    });\r\n\r\n    $(\"#addTagSelect\").change(function () {\r\n        var tagName = $(this).val();\r\n        if (tagName === \"\") {\r\n            $(\"#addTagLabel\").hide();\r\n            $(\"#addTagLink\").show();\r\n        } else {\r\n            $(\"#addTagForm input[name=tagName]\").val(tagName);\r\n            $(\"#addTagForm\").submit();\r\n        }\r\n    });"},
{"text": "#new-resource-form tr td {\r\npadding-top: 0.5em;\r\n}\r\n#new-resource-form input:not([type=\"submit\"]) {\r\nfont-size: 0.8em;\r\n}\r\n#new-resource-form select {\r\nfont-size: 0.8em;\r\n}"},
{"text": "\u2192 Contest materials"},
{"text": "Announcement"},
{"text": "Tutorial"},
{"text": "Problems"},
{"text": "Submit Code"},
{"text": "My Submissions"},
{"text": "Status"},
{"text": "Hacks"},
{"text": "Standings"},
{"text": "Custom Invocation"},
{"text": "#facebox .content:has(.diff-popup) {\r\n            width: 90vw;\r\n            max-width: 120rem !important;\r\n        }\r\n\r\n        .diff-popup {\r\n            width: 90vw;\r\n            max-width: 120rem !important;\r\n            display: none;\r\n            overflow: auto;\r\n        }\r\n\r\n        .input-output-copier {\r\n            font-size: 1.2rem;\r\n            float: right;\r\n            color: #888 !important;\r\n            cursor: pointer;\r\n            border: 1px solid rgb(185, 185, 185);\r\n            padding: 3px;\r\n            margin: 1px;\r\n            line-height: 1.1rem;\r\n            text-transform: none;\r\n        }\r\n\r\n        .input-output-copier:hover {\r\n            background-color: #def;\r\n        }\r\n\r\n        .test-explanation textarea {\r\n            width: 100%;\r\n            height: 1.5em;\r\n        }\r\n\r\n        .pending-submission-message {\r\n            color: darkorange !important;\r\n        }"},
{"text": "const OPENING_SPACE = String.fromCharCode(1001);\r\n        const CLOSING_SPACE = String.fromCharCode(1002);\r\n\r\n        const nodeToText = function (node, pre) {\r\n            let result = [];\r\n\r\n            if (node.tagName === \"SCRIPT\" || node.tagName === \"math\"\r\n                || (node.classList && node.classList.contains(\"input-output-copier\")))\r\n                return [];\r\n\r\n            if (node.tagName === \"NOBR\") {\r\n                result.push(OPENING_SPACE);\r\n            }\r\n\r\n            if (node.nodeType === Node.TEXT_NODE) {\r\n                let s = node.textContent;\r\n                if (!pre) {\r\n                    s = s.replace(/\\s+/g, \" \");\r\n                }\r\n                if (s.length > 0) {\r\n                    result.push(s);\r\n                }\r\n            }\r\n\r\n            if (pre && node.tagName === \"BR\") {\r\n                result.push(\"\\n\");\r\n            }\r\n\r\n            node.childNodes.forEach(function (child) {\r\n                result.push(nodeToText(child, node.tagName === \"PRE\").join(\"\"));\r\n            });\r\n\r\n            if (node.tagName === \"DIV\"\r\n                || node.tagName === \"P\"\r\n                || node.tagName === \"PRE\"\r\n                || node.tagName === \"UL\"\r\n                || node.tagName === \"LI\"\r\n            ) {\r\n                result.push(\"\\n\");\r\n            }\r\n\r\n            if (node.tagName === \"NOBR\") {\r\n                result.push(CLOSING_SPACE);\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        const isSpecial = function (c) {\r\n            return c === ',' || c === '.' || c === ';' || c === ')' || c === ' ';\r\n        }\r\n\r\n        const convertStatementToText = function(statmentNode) {\r\n            const text = nodeToText(statmentNode, false).join(\"\").replace(/ +/g, \" \").replace(/\\n\\n+/g, \"\\n\\n\");\r\n            let result = [];\r\n            for (let i = 0; i < text.length; i++) {\r\n                const c = text.charAt(i);\r\n                if (c === OPENING_SPACE) {\r\n                    if (!((i > 0 && text.charAt(i - 1) === '(') || (result.length > 0 && result[result.length - 1] === ' '))) {\r\n                        result.push('+');\r\n                    }\r\n                } else if (c === CLOSING_SPACE) {\r\n                    if (!(i + 1 < text.length && isSpecial(text.charAt(i + 1)))) {\r\n                        result.push('-');\r\n                    }\r\n                } else {\r\n                    result.push(c);\r\n                }\r\n            }\r\n            return result.join(\"\").split(\"\\n\").map(value => value.trim()).join(\"\\n\");\r\n        };"},
{"text": "The problem statement has recently been changed."},
{"text": "View the changes."},
{"text": "\u00d7"},
{"text": "D. Shuffle"},
{"text": "time limit per test"},
{"text": "2 seconds"},
{"text": "memory limit per test"},
{"text": "512 megabytes"},
{"text": "input"},
{"text": "standard input"},
{"text": "output"},
{"text": "standard output"},
{"text": "You are given a binary string (i.\u2009e. a string consisting of characters"},
{"text": "0"},
{"text": "and/or"},
{"text": "1"},
{"text": ") $$$s$$$ of length $$$n$$$. You can perform the following operation with the string $$$s$$$"},
{"text": "at most once"},
{"text": ": choose a substring (a contiguous subsequence) of $$$s$$$ having"},
{"text": "exactly"},
{"text": "$$$k$$$ characters"},
{"text": "1"},
{"text": "in it, and shuffle it (reorder the characters in the substring as you wish)."},
{"text": "Calculate the number of different strings which can be obtained from $$$s$$$ by performing this operation at most once."},
{"text": "Input"},
{"text": "The first line contains two integers $$$n$$$ and $$$k$$$ ($$$2 \\le n \\le 5000$$$; $$$0 \\le k \\le n$$$)."},
{"text": "The second line contains the string $$$s$$$ of length $$$n$$$, consisting of characters"},
{"text": "0"},
{"text": "and/or"},
{"text": "1"},
{"text": "."},
{"text": "Output"},
{"text": "Print one integer \u2014 the number of different strings which can be obtained from $$$s$$$ by performing the described operation at most once. Since the answer can be large, output it modulo $$$998244353$$$."},
{"text": "Examples"},
{"text": "Input"},
{"text": "7 2\n1100110"},
{"text": "Output"},
{"text": "16"},
{"text": "Input"},
{"text": "5 0\n10010"},
{"text": "Output"},
{"text": "1"},
{"text": "Input"},
{"text": "8 1\n10001000"},
{"text": "Output"},
{"text": "10"},
{"text": "Input"},
{"text": "10 8\n0010011000"},
{"text": "Output"},
{"text": "1"},
{"text": "Note"},
{"text": "Some strings you can obtain in the first example:"},
{"text": "to obtain"},
{"text": "0110110"},
{"text": ", you can take the substring from the $$$1$$$-st character to the $$$4$$$-th character, which is"},
{"text": "1100"},
{"text": ", and reorder its characters to get"},
{"text": "0110"},
{"text": ";"},
{"text": "to obtain"},
{"text": "1111000"},
{"text": ", you can take the substring from the $$$3$$$-rd character to the $$$7$$$-th character, which is"},
{"text": "00110"},
{"text": ", and reorder its characters to get"},
{"text": "11000"},
{"text": ";"},
{"text": "to obtain"},
{"text": "1100101"},
{"text": ", you can take the substring from the $$$5$$$-th character to the $$$7$$$-th character, which is"},
{"text": "110"},
{"text": ", and reorder its characters to get"},
{"text": "101"},
{"text": "."},
{"text": "In the second example, $$$k = 0$$$ so you can only choose the substrings consisting only of"},
{"text": "0"},
{"text": "characters. Reordering them doesn't change the string at all, so the only string you can obtain is"},
{"text": "10010"},
{"text": "."},
{"text": "$(function () {\r\n            Codeforces.addMathJaxListener(function () {\r\n                let $problem = $(\"div[problemindex=D]\");\r\n                let uuid = $problem.attr(\"data-uuid\");\r\n                let statementText = convertStatementToText($problem.find(\".ttypography\").get(0));\r\n\r\n                let previousStatementText = Codeforces.getFromStorage(uuid);\r\n                if (previousStatementText) {\r\n                    if (previousStatementText !== statementText) {\r\n                        $problem.find(\".diff-notifier\").show();\r\n\r\n                        $problem.find(\".diff-notifier-close\").click(function() {\r\n                            Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);\r\n                            $problem.find(\".diff-notifier\").hide();\r\n                        });\r\n\r\n                        $problem.find(\"a.view-changes\").click(function() {\r\n                            $.post(\"/data/diff\", {action: \"getDiff\", a: previousStatementText, b: statementText}, function (result) {\r\n                                if (result[\"success\"] === \"true\") {\r\n                                    Codeforces.facebox(\".diff-popup\", \"//codeforces.org/s/41053\");\r\n                                    $(\"#facebox .diff-popup\").html(result[\"diff\"]);\r\n                                }\r\n                            }, \"json\");\r\n                        });\r\n                    }\r\n                } else {\r\n                    Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);\r\n                }\r\n            });\r\n        });"},
{"text": "$(document).ready(function () {\r\n        window.changedTests = new Set();\r\n        console.log(\"Initialized window.changedTests.\");\r\n\r\n        function endsWith(string, suffix) {\r\n            return string.indexOf(suffix, string.length - suffix.length) !== -1;\r\n        }\r\n\r\n        var inputFileDiv = $(\"div.input-file\");\r\n        var inputFile = inputFileDiv.text();\r\n        var outputFileDiv = $(\"div.output-file\");\r\n        var outputFile = outputFileDiv.text();\r\n\r\n\r\n        if (!endsWith(inputFile, \"standard input\")\r\n            && !endsWith(inputFile, \"standard input\")) {\r\n            inputFileDiv.attr(\"style\", \"font-weight: bold\");\r\n        }\r\n\r\n        if (!endsWith(outputFile, \"standard output\")\r\n            && !endsWith(outputFile, \"standard output\")) {\r\n            outputFileDiv.attr(\"style\", \"font-weight: bold\");\r\n        }\r\n\r\n        var titleDiv = $(\"div.header div.title\");\r\n\r\n\r\n\r\n        String.prototype.replaceAll = function (search, replace) {\r\n            return this.split(search).join(replace);\r\n        };\r\n\r\n        $(\".sample-test .title\").each(function () {\r\n            var preId = (\"id\" + Math.random()).replaceAll(\".\", \"0\");\r\n            var cpyId = (\"id\" + Math.random()).replaceAll(\".\", \"0\");\r\n\r\n            $(this).parent().find(\"pre\").attr(\"id\", preId);\r\n            var $copy = $(\"<div title='Copy' data-clipboard-target='#\" + preId + \"' id='\" + cpyId + \"' class='input-output-copier'>Copy</div>\");\r\n            $(this).append($copy);\r\n\r\n            var clipboard = new Clipboard('#' + cpyId, {\r\n                text: function (trigger) {\r\n                    return Codeforces.filterClipboardText(document.querySelector('#' + preId).innerText);\r\n                }\r\n            });\r\n\r\n            var isInput = $(this).parent().hasClass(\"input\");\r\n\r\n            clipboard.on('success', function (e) {\r\n                if (isInput) {\r\n                    Codeforces.showMessage(\"The example input has been copied into the clipboard\");\r\n                } else {\r\n                    Codeforces.showMessage(\"The example output has been copied into the clipboard\");\r\n                }\r\n                e.clearSelection();\r\n            });\r\n        });\r\n\r\n        $(\".test-form-item input\").change(function () {\r\n            addPendingSubmissionMessage($($(this).closest(\"form\")), \"You changed the answer, do not forget to submit it if you want to save the changes\");\r\n            var index = $(this).closest(\".problemindexholder\").attr(\"problemindex\");\r\n            var test = \"\";\r\n            $(this).closest(\"form input\").each(function () {\r\n                var test_ = $(this).attr(\"name\");\r\n                if (test_ && test_.substring(0, 4) === \"test\") {\r\n                    test = test_;\r\n                }\r\n            });\r\n            if (index.length > 0 && test.length > 0) {\r\n                var indexTest = index + \"::\" + test;\r\n                window.changedTests.add(indexTest);\r\n            }\r\n        });\r\n\r\n        $(window).on('beforeunload', function () {\r\n            if (window.changedTests.size > 0) {\r\n                return 'Dialog text here';\r\n            }\r\n        });\r\n\r\n        autosize($('.test-explanation textarea'));\r\n\r\n    });"},
{"text": "Codeforces"},
{"text": "(c) Copyright 2010-2021 Mike Mirzayanov"},
{"text": "The only programming contests Web 2.0 platform"},
{"text": "Server time:"},
{"text": "Jan/01/2022 16:03:57"},
{"text": "(k3)."},
{"text": "Desktop version, switch to"},
{"text": "mobile version"},
{"text": "."},
{"text": "Privacy Policy"},
{"text": "Supported by"},
{"text": "$(function() {\n                $(\".switchToMobile\").click(function() {\n                    Codeforces.redirect(Codeforces.updateUrlParameter(document.location.href, \"mobile\", \"true\"));\n                    return false;\n                });\n                $(\".switchToDesktop\").click(function() {\n                    Codeforces.redirect(Codeforces.updateUrlParameter(document.location.href, \"mobile\", \"false\"));\n                    return false;\n                });\n            });"},
{"text": "$(document).ready(function () {\n            if ($(window).width() < 1600) {\n                $('.button-up').css('width', '30px').css('line-height', '30px').css('font-size', '20px');\n            }\n\n            if ($(window).width() >= 1200) {\n                $ (window).scroll (function () {\n                    if ($ (this).scrollTop () > 100) {\n                        $ ('.button-up').fadeIn();\n                    } else {\n                        $ ('.button-up').fadeOut();\n                    }\n                });\n\n                $('.button-up').click(function () {\n                    $('body,html').animate({\n                        scrollTop: 0\n                    }, 500);\n                    return false;\n                });\n\n                $('.button-up').hover(function () {\n                    $(this).animate({\n                        'opacity':'1'\n                    }).css({'background-color':'#e7ebf0','color':'#6a86a4'});\n                }, function () {\n                    $(this).animate({\n                        'opacity':'0.7'\n                    }).css({'background':'none','color':'#d3dbe4'});;\n                });\n            }\n            Codeforces.focusOnError();\n        });"},
{"text": "User lists"},
{"text": "Name"},
{"text": "$(document).ready(function () {\n                // Create new ':containsIgnoreCase' selector for search\n                jQuery.expr[':'].containsIgnoreCase = function(a, i, m) {\n                    return jQuery(a).text().toUpperCase()\n                            .indexOf(m[3].toUpperCase()) >= 0;\n                };\n\n                if (window.updateDatatableFilter == undefined) {\n                    window.updateDatatableFilter = function(i) {\n                        var parent = $(i).parent().parent().parent().parent();\n                        $(\"tr.no-items\", parent).remove();\n                        $(\"tr\", parent).hide().removeClass('visible');\n                        var text = $(i).val();\n                        if (text) {\n                            $(\"tr\" + \":containsIgnoreCase('\" + text + \"')\", parent).show().addClass('visible');\n                        } else {\n                            parent.find(\".rowCount\").text(\"\");\n                            $(\"tr\", parent).show().addClass('visible');\n                        }\n\n                        var found = false;\n                        var visibleRowCount = 0;\n                        $(\"tr\", parent).each(function () {\n                            if (!found) {\n                                if ($(this).find(\"th\").size() > 0) {\n                                    $(this).show().addClass('visible');\n                                    found = true;\n                                }\n                            }\n                            if ($(this).hasClass('visible')) {\n                                visibleRowCount++;\n                            }\n                        });\n                        if (text) {\n                            parent.find(\".rowCount\").text(\"Matches: \" + (visibleRowCount - (found ? 1 : 0)));\n                        }\n                        if (visibleRowCount == (found ? 1 : 0)) {\n                            $(\"<tr class='no-items visible'><td style=\\\"text-align:left;\\\"colspan=\\\"32\\\">No items<\\/td><\\/tr>\").appendTo($(parent).find('table'));\n                        }\n                        $(parent).find(\"tr td\").removeClass(\"dark\");\n                        $(parent).find(\"tr.visible:odd td\").addClass(\"dark\");\n                    }\n\n                    $(\".datatable .closed\").click(function () {\n                        var parent = $(this).parent();\n                        $(this).hide();\n                        $(\".filter\", parent).fadeIn(function () {\n                            $(\"input\", parent).val(\"\").focus().css(\"border\", \"1px solid #aaa\");\n                        });\n                    });\n\n                    $(\".datatable .opened\").click(function () {\n                        var parent = $(this).parent().parent();\n                        $(\".filter\", parent).fadeOut(function () {\n                            $(\".closed\", parent).show();\n                            $(\"input\", parent).val(\"\").each(function () {\n                                window.updateDatatableFilter(this);\n                            });\n                        });\n                    });\n\n                    $(\".datatable .filter input\").keyup(function(e) {\n                        window.updateDatatableFilter(this);\n                        e.preventDefault();\n                        e.stopPropagation();\n                    });\n\n                    $(\".datatable table\").each(function () {\n                        var found = false;\n                        $(\"tr\", this).each(function () {\n                            if (!found && $(this).find(\"th\").size() == 0) {\n                                found = true;\n                            }\n                        });\n                        if (!found) {\n                            $(\"<tr class='no-items visible'><td style=\\\"text-align:left;\\\"colspan=\\\"32\\\">No items<\\/td><\\/tr>\").appendTo(this);\n                        }\n                    });\n\n                    // Applies styles to datatables.\n                    $(\".datatable\").each(function () {\n                        $(this).find(\"tr:first th\").addClass(\"top\");\n                        $(this).find(\"tr:last td\").addClass(\"bottom\");\n                        $(this).find(\"tr:odd td\").addClass(\"dark\");\n                        $(this).find(\"tr td:first-child, tr th:first-child\").addClass(\"left\");\n                        $(this).find(\"tr td:last-child, tr th:last-child\").addClass(\"right\");\n                    });\n\n                    $(\".datatable table.tablesorter\").each(function () {\n                        $(this).bind(\"sortEnd\", function () {\n                            $(\".datatable\").each(function () {\n                                $(this).find(\"th, td\")\n                                    .removeClass(\"top\").removeClass(\"bottom\")\n                                    .removeClass(\"left\").removeClass(\"right\")\n                                    .removeClass(\"dark\");\n                                $(this).find(\"tr:first th\").addClass(\"top\");\n                                $(this).find(\"tr:last td\").addClass(\"bottom\");\n                                $(this).find(\"tr:odd td\").addClass(\"dark\");\n                                $(this).find(\"tr td:first-child, tr th:first-child\").addClass(\"left\");\n                                $(this).find(\"tr td:last-child, tr th:last-child\").addClass(\"right\");\n                            });\n                        });\n                    });\n                }\n        });"},
{"text": "$(function() {\n                $(\".userListMarker\").click(function() {\n                    $.post(\"/data/lists\", {action: \"findTouched\"}, function(json) {\n                        Codeforces.facebox(\".userListsFacebox\");\n                        var tbody = $(\"#facebox tbody\");\n                        tbody.empty();\n                        for (var i in json) {\n                            tbody.append(\n                                    $(\"<tr></tr>\").append(\n                                            $(\"<td></td>\").attr(\"data-readKey\", json[i].readKey).text(json[i].name)\n                                    )\n                            );\n                        }\n                        Codeforces.updateDatatables();\n                        tbody.find(\"td\").css(\"cursor\", \"pointer\").click(function() {\n                            document.location = Codeforces.updateUrlParameter(document.location.href, \"list\", $(this).attr(\"data-readKey\"));\n                        });\n                    }, \"json\");\n                });\n            });"},
{"text": "if ('serviceWorker' in navigator && 'fetch' in window && 'caches' in window) {\n            var parser = new UAParser();\n            var browserName = parser.getBrowser().name;\n            var browserVersion = parser.getBrowser().version;\n\n            var supportedBrowser = false;\n            var supportedBrowsers = {\n                \"Chrome\": \"76\",\n                \"Firefox\": \"68\",\n                // \"Edge\": \"18\",\n                \"Safari\": \"12.1\",\n                \"Opera\": \"63\",\n                \"Yandex\": \"19.9\"\n            };\n\n            for (var name in supportedBrowsers) {\n                if (name === browserName && supportedBrowsers[name] <= browserVersion) {\n                    supportedBrowser = true;\n                }\n            }\n\n            if (supportedBrowser) {\n                navigator.serviceWorker.register('/service-worker-41053.js')\n                    .then(function (registration) {\n                        console.log('Service worker registered');\n                    })\n                    .catch(function (error) {\n                        console.log('Registration failed: ', error);\n                    });\n            } else {\n                navigator.serviceWorker.getRegistrations().then(function(registrations) {\n                    for (var i = 0; i < registrations.length; i++) {\n                        registrations[i].unregister();\n                    }\n                });\n            }\n        }"}
]