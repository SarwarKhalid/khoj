[
{"url": "http://localhost/pdf_test/test.html", "depth": 1},
{"text": "Page Title"},
{"text": "page 1"},
{"text": "give the information"},
{"text": "page 02 --click"},
{"text": "page 03 --click"},
{"text": "Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Vestibulum tortor quam, feugiat vitae, ultricies eget, tempor sit amet, ante. Donec eu libero sit amet quam egestas semper. Aenean ultricies mi vitae est. Mauris placerat eleifend leo."},
{"text": "-->"}
]

[
{"url": "http://localhost/pdf_test/test03.html", "depth": 1},
{"text": "Page Title"},
{"text": "page 3"},
{"text": "page 04 --click"},
{"text": "give the information"},
{"text": "Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Vestibulum tortor quam, feugiat vitae, ultricies eget, tempor sit amet, ante. Donec eu libero sit amet quam egestas semper. Aenean ultricies mi vitae est. Mauris placerat eleifend leo. Quisque sit amet est et sapien ullamcorper pharetra. Vestibulum erat wisi, condimentum sed, commodo vitae, ornare sit amet, wisi. Aenean fermentum, elit eget tincidunt condimentum, eros ipsum rutrum orci, sagittis tempus lacus enim ac dui. Donec non enim in turpis pulvinar facilisis. Ut felis. Praesent dapibus, neque id cursus faucibus, tortor neque egestas augue, eu vulputate magna eros eu erat. Aliquam erat volutpat. Nam dui mi, tincidunt quis, accumsan porttitor, facilisis luctus, metus"},
{"text": "Download Incremental model pdf here!"},
{"url": "http://localhost/pdf_test/test04.html", "depth": 2},
{"text": "Page Title"},
{"text": "page 4"},
{"text": "page 05 --click"},
{"text": "give the information"},
{"text": "Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Vestibulum tortor quam, feugiat vitae, ultricies eget, tempor sit amet, ante. Donec eu libero sit amet quam egestas semper. Aenean ultricies mi vitae est. Mauris placerat eleifend leo. Quisque sit amet est et sapien ullamcorper pharetra. Vestibulum erat wisi, condimentum sed, commodo vitae, ornare sit amet, wisi. Aenean fermentum, elit eget tincidunt condimentum, eros ipsum rutrum orci, sagittis tempus lacus enim ac dui. Donec non enim in turpis pulvinar facilisis. Ut felis. Praesent dapibus, neque id cursus faucibus, tortor neque egestas augue, eu vulputate magna eros eu erat. Aliquam erat volutpat. Nam dui mi, tincidunt quis, accumsan porttitor, facilisis luctus, metus"},
{"url": "http://localhost/pdf_test/CSE327%20-%20Incremental%20Model%20Task%20Breakdowns%20(1).pdf", "depth": 2},
{"text": "Download game design here!"},
{"url": "http://localhost/pdf_test/test05.html", "depth": 3},
{"text": "Page Title"},
{"text": "page 5"},
{"text": "page 06--click"},
{"url": "http://localhost/pdf_test/Student%20Task%20-%20Game%20Design.pdf", "depth": 3},
{"text": "give the information"},
{"text": "Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Vestibulum tortor quam, feugiat vitae, ultricies eget, tempor sit amet, ante. Donec eu libero sit amet quam egestas semper. Aenean ultricies mi vitae est. Mauris placerat eleifend leo. Quisque sit amet est et sapien ullamcorper pharetra. Vestibulum erat wisi, condimentum sed, commodo vitae, ornare sit amet, wisi. Aenean fermentum, elit eget tincidunt condimentum, eros ipsum rutrum orci, sagittis tempus lacus enim ac dui. Donec non enim in turpis pulvinar facilisis. Ut felis. Praesent dapibus, neque id cursus faucibus, tortor neque egestas augue, eu vulputate magna eros eu erat. Aliquam erat volutpat. Nam dui mi, tincidunt quis, accumsan porttitor, facilisis luctus, metus"},
{"url": "http://localhost/pdf_test/test06.html", "depth": 4},
{"text": "Page Title"},
{"text": "page 6"},
{"text": "page 02--click"},
{"text": "give the information"},
{"text": "Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Vestibulum tortor quam, feugiat vitae, ultricies eget, tempor sit amet, ante. Donec eu libero sit amet quam egestas semper. Aenean ultricies mi vitae est. Mauris placerat eleifend leo. Quisque sit amet est et sapien ullamcorper pharetra. Vestibulum erat wisi, condimentum sed, commodo vitae, ornare sit amet, wisi. Aenean fermentum, elit eget tincidunt condimentum, eros ipsum rutrum orci, sagittis tempus lacus enim ac dui. Donec non enim in turpis pulvinar facilisis. Ut felis. Praesent dapibus, neque id cursus faucibus, tortor neque egestas augue, eu vulputate magna eros eu erat. Aliquam erat volutpat. Nam dui mi, tincidunt quis, accumsan porttitor, facilisis luctus, metus"},
{"url": "http://localhost/pdf_test/test02.html", "depth": 5},
{"text": "Page Title"},
{"text": "page 2"},
{"text": "give the information"},
{"text": "Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Vestibulum tortor quam, feugiat vitae, ultricies eget, tempor sit amet, ante. Donec eu libero sit amet quam egestas semper. Aenean ultricies mi vitae est. Mauris placerat eleifend leo. Quisque sit amet est et sapien ullamcorper pharetra. Vestibulum erat wisi, condimentum sed, commodo vitae, ornare sit amet, wisi. Aenean fermentum, elit eget tincidunt condimentum, eros ipsum rutrum orci, sagittis tempus lacus enim ac dui. Donec non enim in turpis pulvinar facilisis. Ut felis. Praesent dapibus, neque id cursus faucibus, tortor neque egestas augue, eu vulputate magna eros eu erat. Aliquam erat volutpat. Nam dui mi, tincidunt quis, accumsan porttitor, facilisis luctus, metus"},
{"text": "Download Case study pdf here"},
{"url": "http://localhost/pdf_test/Case%20%20Study%20-%20Requirements.pdf", "depth": 6}
]

[
{"url": "http://localhost/pdf_test/test.html", "depth": 1},
{"url": "http://localhost/pdf_test/test02.html", "depth": 2},
{"url": "http://localhost/pdf_test/test03.html", "depth": 2},
{"url": "http://localhost/pdf_test/Case%20%20Study%20-%20Requirements.pdf", "depth": 3},
{"pdf": "http://localhost/pdf_test/Case%20%20Study%20-%20Requirements.pdf", "depth": 3},
{"pdf text": "Case Study\nA company wants to automate its task allocation process. Currently, employees are assigned tasks either\nverbally or via email, and it is very hard to keep track of who is doing what, and how much is done. The\ncompany wants to move to a web-based task allocation system to do the following.\nAnyone can create a task. Each task gets a corresponding ticket number. One user is assigned as\n\u201cresponsible\u201d for the task, and others can be assigned as \u201chelpers\u201d. Admins create and delete user\naccounts (individually, or in bulk via a CSV file).\nWhen a task is created, by default the creator is \u201cresponsible\u201d for it unless it is changed. Admins can also\nchange the responsible person. The creator, or the current responsible person, can also change the\nassignment. The responsible person can add/remove helpers.\nResponsible persons and helpers can post against a task. Once a task is complete, its status has to be\nchanged to complete. Tasks can be in different statuses: Not initiated, initiated, progressing, stalled,\nwaiting for resources, completed, unresolved being some of them.\nWhen creating a task, the creator has to give a task title and a short description of no less than 50 words.\nHe/She can assign the responsible person and/or helpers. He/she can also attach watchers to the task. All\nstakeholders, the creator, responsible person, helpers, and watchers should be notified with every post on\nthe task.\nTasks can be dependent on other tasks, meaning they will never achieve the complete status, unless the\nother tasks are completed. Tasks can also have sub-tasks (not the same as a dependency), which can be\ncreated and assigned to other responsible people, but the responsible person on the main task will\nautomatically become a watcher of the sub-tasks, as well as the tasks on which there is a dependency.\nTask posts are mainly text but can have attachments. Special processing should be done on certain types\nof attachments. These are:\n\u25cf\nZip files and binary files should be scanned for viruses.\n\u25cf\nImages should be limited to a maximum resolution of 1024 x 800. If necessary, the system should\nbe resized on the fly.\n\u25cf\nURLs should be stored as it is, but when displaying the URL, the title of the target HTML content\nshould be rendered as well.\n\u25cf\nVideo files should be displayed in two parts:\n\u25cb\nThe first part is a download link,\n\u25cb\nand the second part is a video player embedded in the view so that the viewer can play\nthe video in the system itself.\n\u25cf\nGIT URLs should be linked to the GIT repository as well as a small floating test showing how the\nrepository can be cloned.\n\u25cf\nWhen viewing PDF files should have a download link and an icon. Clicking on the icon should\nrender the file on the system itself instead of downloading.\n"},
{"url": "http://localhost/pdf_test/test04.html", "depth": 3},

{"url": "http://localhost/pdf_test/CSE327%20-%20Incremental%20Model%20Task%20Breakdowns%20(1).pdf", "depth": 3},
{"pdf": "http://localhost/pdf_test/CSE327%20-%20Incremental%20Model%20Task%20Breakdowns%20(1).pdf", "depth": 3},
{"pdf text": "CSE 327 - Software Engineering\nClass work\nAn awesomely awesome university needs a new advising system.  The required features are listed below\nin an intentionally unordered fashion.  At this early stage, we will simplify the problem for you and say\nthat all features are considered to be equally important by the client.\n1.\nAllow advisors to upload subject allocations for an entire batch, through the spreadsheet\ndownloaded from the system, created using the student registration records.\n2.\nAllow administrators to add/edit/delete advisor accounts.\n3.\nAllow administrators to add/edit/delete student accounts.\n4.\nAllow advisors to add/delete/edit the subject allocations of individual students.\n5.\nAllow an administrator to add/remove subjects.\n6.\nAllow advisors to download a spreadsheet, created by the system, which they can fill out offline.\nThis spreadsheet should be designed to reflect the student registration records\n7.\nAllow administrators to create subject dependencies.\n8.\nPublish advising records in the following methods.\n\u25cf\nEmail each student their subject allocations and routine.\n\u25cf\nEmail each academic their subject allocations and routines.\n\u25cf\nEmail the head of the department a summary report.\n9.\nKeep a regular backup of the data.\n10. Once a teaching session has begun, the subject allocations should become unchangeable.\nTerminology:\n1.\nSubject dependencies: These reflect the 'prerequisite' requirement(s) of a subject.\n2.\nAdvisor: An academic staff who is charged with advising a group of students (usually one batch\nand/or a group in a batch) on what subjects they should take. The advisor is ultimately the\nperson who enters and verifies the subject allocations for each student under his/her care.\nYour task in this class work is:\n\u25cf\nCreate a sensible order of the features for development and delivery.\n\u25cf\nBreak the tasks into 3-6 increments.\n"},

{"url": "http://localhost/pdf_test/Student%20Task%20-%20Game%20Design.pdf", "depth": 4},
{"pdf": "http://localhost/pdf_test/Student%20Task%20-%20Game%20Design.pdf", "depth": 4},
{"pdf text": "Practice Material\nCSE 327: Software Engineering\nAcknowledgements: The following case-study is taken from a final exam question of FIT3077,\nMonash University.\nDraw a conceptual level class diagram for the following case-study:\nA company has decided to enter the market for role-playing game software. You have been contracted\nto design a software platform to support the fundamental concepts common to many such games. The\nfollowing common requirements have been identified:\n\u25cf\nThe game is populated by characters. Characters can be controlled either by a game player\n(human), or by the game system (AI). All characters have a name, a number of health points,\na number of strength points, and an amount of money owned.\n\u25cf\nCharacters can acquire skills during the course of the game. The number of skills that a\ncharacter can have is not limited.\n\u25cf\nA character can carry two items at a time. Some items are weapons.\n\u25cf\nThere is a special sort of item that is able to contain others: a container. A character carrying a\ncontainer is thus able to carry more than two items (indirectly).\n\u25cf\nSome items are consumable. Consuming an item can increase a character\u2019s health and/or\nstrength, or give the character special properties for a limited time. After an item is consumed,\nit ceases to exist.\n\u25cf\nGames take place in a world consisting of many locations. Each location is a hexagon (i.e. it\nis six-sided). Each location has a terrain type and a number of health points it costs to\ntraverse.\n\u25cf\nA character is located at a single location at a given game time step. A each time step of the\ngame, characters can move to a location neighbouring the location they were in at the last\nturn.\n\u25cf\nLocations can contain items and money. Characters can drop items or money in the location\nwhere they are, and pick up items or money that are there.\n\u25cf\nWhen two or more characters are in the same location at the same time, they can interact.\nThere are two kinds of interactions: combat and trading.\n\u25cf\nWhen two characters interact via combat, each loses health points depending on the strength\nand skills of the other, any weapons they are carrying, and a random factor. If a character\u2019s\nhealth points fall to zero, it dies. When a character dies, it drops any item(s) and money that it\nis carrying.\n\u25cf\nWhen two characters interact via trading, each offers a set of items that it is willing to trade.\nOne character then offers money and/or items for an item it wants. The other character can\nchoose to accept or reject the trade. If the trade is accepted, the items and/or money are\nexchanged between the characters. This process can be repeated.\nYou have also been provided with some requirements for a specific game, Wizzo, so that you can\nillustrate how your platform would support a particular game:\n\u25cf\nThere are two types of character, magical and non-magical. Magical characters include\nwizards and elves. Non-magical characters include humans and dwarves.\n\u25cf\nSome skills are magical skills, such as the ability to cast a spell. Only magical characters can\nhave magical skills.\n\u25cf\nThe terrain types are farmland, desert, marsh and water.\n\u25cf\nItems include wands, potions (consumable), swords (weapon), axes (weapon), bread\n(consumable) and backpacks (container).\n\u25cf\nWhen a character consumes a potion, it gets a special property for a fixed number of time\nsteps. There are potions for invisibility, invincibility and endurance.\n"},

{"url": "http://localhost/pdf_test/test05.html", "depth": 4},

{"url": "http://localhost/pdf_test/test06.html", "depth": 5},

]

[
{"url": "http://localhost/pdf_test/test.html", "depth": 1},
{"url": "http://localhost/pdf_test/test02.html", "depth": 2},
{"url": "http://localhost/pdf_test/test03.html", "depth": 2},
{"url": "http://localhost/pdf_test/Case%20%20Study%20-%20Requirements.pdf", "depth": 3},
{"pdf": "http://localhost/pdf_test/Case%20%20Study%20-%20Requirements.pdf", "depth": 3},
{"pdf text": "Case Study\nA company wants to automate its task allocation process. Currently, employees are assigned tasks either\nverbally or via email, and it is very hard to keep track of who is doing what, and how much is done. The\ncompany wants to move to a web-based task allocation system to do the following.\nAnyone can create a task. Each task gets a corresponding ticket number. One user is assigned as\n\u201cresponsible\u201d for the task, and others can be assigned as \u201chelpers\u201d. Admins create and delete user\naccounts (individually, or in bulk via a CSV file).\nWhen a task is created, by default the creator is \u201cresponsible\u201d for it unless it is changed. Admins can also\nchange the responsible person. The creator, or the current responsible person, can also change the\nassignment. The responsible person can add/remove helpers.\nResponsible persons and helpers can post against a task. Once a task is complete, its status has to be\nchanged to complete. Tasks can be in different statuses: Not initiated, initiated, progressing, stalled,\nwaiting for resources, completed, unresolved being some of them.\nWhen creating a task, the creator has to give a task title and a short description of no less than 50 words.\nHe/She can assign the responsible person and/or helpers. He/she can also attach watchers to the task. All\nstakeholders, the creator, responsible person, helpers, and watchers should be notified with every post on\nthe task.\nTasks can be dependent on other tasks, meaning they will never achieve the complete status, unless the\nother tasks are completed. Tasks can also have sub-tasks (not the same as a dependency), which can be\ncreated and assigned to other responsible people, but the responsible person on the main task will\nautomatically become a watcher of the sub-tasks, as well as the tasks on which there is a dependency.\nTask posts are mainly text but can have attachments. Special processing should be done on certain types\nof attachments. These are:\n\u25cf\nZip files and binary files should be scanned for viruses.\n\u25cf\nImages should be limited to a maximum resolution of 1024 x 800. If necessary, the system should\nbe resized on the fly.\n\u25cf\nURLs should be stored as it is, but when displaying the URL, the title of the target HTML content\nshould be rendered as well.\n\u25cf\nVideo files should be displayed in two parts:\n\u25cb\nThe first part is a download link,\n\u25cb\nand the second part is a video player embedded in the view so that the viewer can play\nthe video in the system itself.\n\u25cf\nGIT URLs should be linked to the GIT repository as well as a small floating test showing how the\nrepository can be cloned.\n\u25cf\nWhen viewing PDF files should have a download link and an icon. Clicking on the icon should\nrender the file on the system itself instead of downloading.\n"},
{"url": "http://localhost/pdf_test/test04.html", "depth": 3},
{"url": "http://localhost/pdf_test/CSE327%20-%20Incremental%20Model%20Task%20Breakdowns%20(1).pdf", "depth": 3},
{"pdf": "http://localhost/pdf_test/CSE327%20-%20Incremental%20Model%20Task%20Breakdowns%20(1).pdf", "depth": 3},
{"pdf text": "CSE 327 - Software Engineering\nClass work\nAn awesomely awesome university needs a new advising system.  The required features are listed below\nin an intentionally unordered fashion.  At this early stage, we will simplify the problem for you and say\nthat all features are considered to be equally important by the client.\n1.\nAllow advisors to upload subject allocations for an entire batch, through the spreadsheet\ndownloaded from the system, created using the student registration records.\n2.\nAllow administrators to add/edit/delete advisor accounts.\n3.\nAllow administrators to add/edit/delete student accounts.\n4.\nAllow advisors to add/delete/edit the subject allocations of individual students.\n5.\nAllow an administrator to add/remove subjects.\n6.\nAllow advisors to download a spreadsheet, created by the system, which they can fill out offline.\nThis spreadsheet should be designed to reflect the student registration records\n7.\nAllow administrators to create subject dependencies.\n8.\nPublish advising records in the following methods.\n\u25cf\nEmail each student their subject allocations and routine.\n\u25cf\nEmail each academic their subject allocations and routines.\n\u25cf\nEmail the head of the department a summary report.\n9.\nKeep a regular backup of the data.\n10. Once a teaching session has begun, the subject allocations should become unchangeable.\nTerminology:\n1.\nSubject dependencies: These reflect the 'prerequisite' requirement(s) of a subject.\n2.\nAdvisor: An academic staff who is charged with advising a group of students (usually one batch\nand/or a group in a batch) on what subjects they should take. The advisor is ultimately the\nperson who enters and verifies the subject allocations for each student under his/her care.\nYour task in this class work is:\n\u25cf\nCreate a sensible order of the features for development and delivery.\n\u25cf\nBreak the tasks into 3-6 increments.\n"},
{"url": "http://localhost/pdf_test/test05.html", "depth": 4},
{"url": "http://localhost/pdf_test/Student%20Task%20-%20Game%20Design.pdf", "depth": 4},
{"pdf": "http://localhost/pdf_test/Student%20Task%20-%20Game%20Design.pdf", "depth": 4},
{"pdf text": "Practice Material\nCSE 327: Software Engineering\nAcknowledgements: The following case-study is taken from a final exam question of FIT3077,\nMonash University.\nDraw a conceptual level class diagram for the following case-study:\nA company has decided to enter the market for role-playing game software. You have been contracted\nto design a software platform to support the fundamental concepts common to many such games. The\nfollowing common requirements have been identified:\n\u25cf\nThe game is populated by characters. Characters can be controlled either by a game player\n(human), or by the game system (AI). All characters have a name, a number of health points,\na number of strength points, and an amount of money owned.\n\u25cf\nCharacters can acquire skills during the course of the game. The number of skills that a\ncharacter can have is not limited.\n\u25cf\nA character can carry two items at a time. Some items are weapons.\n\u25cf\nThere is a special sort of item that is able to contain others: a container. A character carrying a\ncontainer is thus able to carry more than two items (indirectly).\n\u25cf\nSome items are consumable. Consuming an item can increase a character\u2019s health and/or\nstrength, or give the character special properties for a limited time. After an item is consumed,\nit ceases to exist.\n\u25cf\nGames take place in a world consisting of many locations. Each location is a hexagon (i.e. it\nis six-sided). Each location has a terrain type and a number of health points it costs to\ntraverse.\n\u25cf\nA character is located at a single location at a given game time step. A each time step of the\ngame, characters can move to a location neighbouring the location they were in at the last\nturn.\n\u25cf\nLocations can contain items and money. Characters can drop items or money in the location\nwhere they are, and pick up items or money that are there.\n\u25cf\nWhen two or more characters are in the same location at the same time, they can interact.\nThere are two kinds of interactions: combat and trading.\n\u25cf\nWhen two characters interact via combat, each loses health points depending on the strength\nand skills of the other, any weapons they are carrying, and a random factor. If a character\u2019s\nhealth points fall to zero, it dies. When a character dies, it drops any item(s) and money that it\nis carrying.\n\u25cf\nWhen two characters interact via trading, each offers a set of items that it is willing to trade.\nOne character then offers money and/or items for an item it wants. The other character can\nchoose to accept or reject the trade. If the trade is accepted, the items and/or money are\nexchanged between the characters. This process can be repeated.\nYou have also been provided with some requirements for a specific game, Wizzo, so that you can\nillustrate how your platform would support a particular game:\n\u25cf\nThere are two types of character, magical and non-magical. Magical characters include\nwizards and elves. Non-magical characters include humans and dwarves.\n\u25cf\nSome skills are magical skills, such as the ability to cast a spell. Only magical characters can\nhave magical skills.\n\u25cf\nThe terrain types are farmland, desert, marsh and water.\n\u25cf\nItems include wands, potions (consumable), swords (weapon), axes (weapon), bread\n(consumable) and backpacks (container).\n\u25cf\nWhen a character consumes a potion, it gets a special property for a fixed number of time\nsteps. There are potions for invisibility, invincibility and endurance.\n"},
{"url": "http://localhost/pdf_test/test06.html", "depth": 5}
][
{"url": "http://localhost/pdf_crawl/testtt.html", "depth": 1},
{"url": "http://localhost/pdf_crawl/test02.html", "depth": 2},
{"url": "http://localhost/pdf_crawl/test03.html", "depth": 2},
{"url": "http://localhost/pdf_crawl/Case%20%20Study%20-%20Requirements.pdf", "depth": 3},
{"pdf": "http://localhost/pdf_crawl/Case%20%20Study%20-%20Requirements.pdf", "depth": 3},
{"pdf text": "Case Study\nA company wants to automate its task allocation process. Currently, employees are assigned tasks either\nverbally or via email, and it is very hard to keep track of who is doing what, and how much is done. The\ncompany wants to move to a web-based task allocation system to do the following.\nAnyone can create a task. Each task gets a corresponding ticket number. One user is assigned as\n\u201cresponsible\u201d for the task, and others can be assigned as \u201chelpers\u201d. Admins create and delete user\naccounts (individually, or in bulk via a CSV file).\nWhen a task is created, by default the creator is \u201cresponsible\u201d for it unless it is changed. Admins can also\nchange the responsible person. The creator, or the current responsible person, can also change the\nassignment. The responsible person can add/remove helpers.\nResponsible persons and helpers can post against a task. Once a task is complete, its status has to be\nchanged to complete. Tasks can be in different statuses: Not initiated, initiated, progressing, stalled,\nwaiting for resources, completed, unresolved being some of them.\nWhen creating a task, the creator has to give a task title and a short description of no less than 50 words.\nHe/She can assign the responsible person and/or helpers. He/she can also attach watchers to the task. All\nstakeholders, the creator, responsible person, helpers, and watchers should be notified with every post on\nthe task.\nTasks can be dependent on other tasks, meaning they will never achieve the complete status, unless the\nother tasks are completed. Tasks can also have sub-tasks (not the same as a dependency), which can be\ncreated and assigned to other responsible people, but the responsible person on the main task will\nautomatically become a watcher of the sub-tasks, as well as the tasks on which there is a dependency.\nTask posts are mainly text but can have attachments. Special processing should be done on certain types\nof attachments. These are:\n\u25cf\nZip files and binary files should be scanned for viruses.\n\u25cf\nImages should be limited to a maximum resolution of 1024 x 800. If necessary, the system should\nbe resized on the fly.\n\u25cf\nURLs should be stored as it is, but when displaying the URL, the title of the target HTML content\nshould be rendered as well.\n\u25cf\nVideo files should be displayed in two parts:\n\u25cb\nThe first part is a download link,\n\u25cb\nand the second part is a video player embedded in the view so that the viewer can play\nthe video in the system itself.\n\u25cf\nGIT URLs should be linked to the GIT repository as well as a small floating test showing how the\nrepository can be cloned.\n\u25cf\nWhen viewing PDF files should have a download link and an icon. Clicking on the icon should\nrender the file on the system itself instead of downloading.\n"},
{"url": "http://localhost/pdf_crawl/test04.html", "depth": 3},
{"url": "http://localhost/pdf_crawl/CSE327%20-%20Incremental%20Model%20Task%20Breakdowns%20(1).pdf", "depth": 3},
{"pdf": "http://localhost/pdf_crawl/CSE327%20-%20Incremental%20Model%20Task%20Breakdowns%20(1).pdf", "depth": 3},
{"pdf text": "CSE 327 - Software Engineering\nClass work\nAn awesomely awesome university needs a new advising system.  The required features are listed below\nin an intentionally unordered fashion.  At this early stage, we will simplify the problem for you and say\nthat all features are considered to be equally important by the client.\n1.\nAllow advisors to upload subject allocations for an entire batch, through the spreadsheet\ndownloaded from the system, created using the student registration records.\n2.\nAllow administrators to add/edit/delete advisor accounts.\n3.\nAllow administrators to add/edit/delete student accounts.\n4.\nAllow advisors to add/delete/edit the subject allocations of individual students.\n5.\nAllow an administrator to add/remove subjects.\n6.\nAllow advisors to download a spreadsheet, created by the system, which they can fill out offline.\nThis spreadsheet should be designed to reflect the student registration records\n7.\nAllow administrators to create subject dependencies.\n8.\nPublish advising records in the following methods.\n\u25cf\nEmail each student their subject allocations and routine.\n\u25cf\nEmail each academic their subject allocations and routines.\n\u25cf\nEmail the head of the department a summary report.\n9.\nKeep a regular backup of the data.\n10. Once a teaching session has begun, the subject allocations should become unchangeable.\nTerminology:\n1.\nSubject dependencies: These reflect the 'prerequisite' requirement(s) of a subject.\n2.\nAdvisor: An academic staff who is charged with advising a group of students (usually one batch\nand/or a group in a batch) on what subjects they should take. The advisor is ultimately the\nperson who enters and verifies the subject allocations for each student under his/her care.\nYour task in this class work is:\n\u25cf\nCreate a sensible order of the features for development and delivery.\n\u25cf\nBreak the tasks into 3-6 increments.\n"}
][
{"url": "http://localhost/pdf_crawl/test02.html", "depth": 1},
{"url": "http://localhost/pdf_crawl/Case%20%20Study%20-%20Requirements.pdf", "depth": 2},
{"pdf": "http://localhost/pdf_crawl/Case%20%20Study%20-%20Requirements.pdf", "depth": 2},
{"pdf text": "Case Study\nA company wants to automate its task allocation process. Currently, employees are assigned tasks either\nverbally or via email, and it is very hard to keep track of who is doing what, and how much is done. The\ncompany wants to move to a web-based task allocation system to do the following.\nAnyone can create a task. Each task gets a corresponding ticket number. One user is assigned as\n\u201cresponsible\u201d for the task, and others can be assigned as \u201chelpers\u201d. Admins create and delete user\naccounts (individually, or in bulk via a CSV file).\nWhen a task is created, by default the creator is \u201cresponsible\u201d for it unless it is changed. Admins can also\nchange the responsible person. The creator, or the current responsible person, can also change the\nassignment. The responsible person can add/remove helpers.\nResponsible persons and helpers can post against a task. Once a task is complete, its status has to be\nchanged to complete. Tasks can be in different statuses: Not initiated, initiated, progressing, stalled,\nwaiting for resources, completed, unresolved being some of them.\nWhen creating a task, the creator has to give a task title and a short description of no less than 50 words.\nHe/She can assign the responsible person and/or helpers. He/she can also attach watchers to the task. All\nstakeholders, the creator, responsible person, helpers, and watchers should be notified with every post on\nthe task.\nTasks can be dependent on other tasks, meaning they will never achieve the complete status, unless the\nother tasks are completed. Tasks can also have sub-tasks (not the same as a dependency), which can be\ncreated and assigned to other responsible people, but the responsible person on the main task will\nautomatically become a watcher of the sub-tasks, as well as the tasks on which there is a dependency.\nTask posts are mainly text but can have attachments. Special processing should be done on certain types\nof attachments. These are:\n\u25cf\nZip files and binary files should be scanned for viruses.\n\u25cf\nImages should be limited to a maximum resolution of 1024 x 800. If necessary, the system should\nbe resized on the fly.\n\u25cf\nURLs should be stored as it is, but when displaying the URL, the title of the target HTML content\nshould be rendered as well.\n\u25cf\nVideo files should be displayed in two parts:\n\u25cb\nThe first part is a download link,\n\u25cb\nand the second part is a video player embedded in the view so that the viewer can play\nthe video in the system itself.\n\u25cf\nGIT URLs should be linked to the GIT repository as well as a small floating test showing how the\nrepository can be cloned.\n\u25cf\nWhen viewing PDF files should have a download link and an icon. Clicking on the icon should\nrender the file on the system itself instead of downloading.\n"}
]